---
import { getCollection } from "astro:content";
import { BLOG_POST_TYPE } from "../consts.js";
import BlogListElement from "./BlogListElement.astro";
import CheckBox from "./svg/CheckBox.astro";

const allPosts = await getCollection("blog");
const { expanded = false } = Astro.props;
---

<h2 class="text_title">Publicaciones</h2>
<div
  class:list={[
    "publications_wrapper",
    { simple_wrapper: !expanded, expanded_wrapper: expanded },
  ]}
>
  {
    expanded && (
      <div class="filters_wrapper">
        <h4>*Filters</h4>
        <div class="filters_list">
          {BLOG_POST_TYPE.map((type) => (
            <button class="filter">
              <CheckBox class="unchecked visible" />
              <CheckBox class="checked" checked />
              <span class="filter_text">{type}</span>
            </button>
          ))}
        </div>
      </div>
    )
  }
  <section class:list={{ not_expanded: !expanded }}>
    <ul>
      <li class="list_header">
        <h4 class="date">*Date</h4>
        <h4 class="title">*Title</h4>
        <h4 class="type">*Type</h4>
      </li>
      {
        expanded ? (allPosts.map(({ data, slug }) => (
          <BlogListElement data={data} postURL={slug} />
        ))) : (
          allPosts.slice(0, 4).map(({ data, slug }) => (
            <BlogListElement data={data} postURL={slug} />
          ))
        )
      }
    </ul>
  </section>
</div>
<style>
  .publications_wrapper {
    display: grid;
    width: 100%;
    margin-bottom: 20px;
  }

  .simple_wrapper {
    grid-template-columns: 1fr;
  }

  .expanded_wrapper {
    grid-template-columns: 1fr;
    @media (min-width: 960px) {
      grid-template-columns: 150px 1fr;
    }
  }

  ul {
    margin: 0;
    padding: 15px 0;
    @media (min-width: 960px) {
      padding: 0;
    }
  }

  .filters_wrapper {
    display: flex;
    gap: 5px;
    h4 {
      margin: 0;
      font-size: 20px;
      margin-top: 4px;
    }
    @media (min-width: 960px) {
      flex-direction: column;
      flex-basis: 20%;
      padding-right: 15px;
      h4 {
        border-bottom: 2px solid var(--black);
        margin-top: 0;
      }
    }
  }

  .filters_list {
    @media (min-width: 960px) {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
    }
  }

  .filter {
    border: 2px solid transparent;
    background-color: transparent;
    color: var(--light-gray);
    padding: 4px 8px;
    &:hover {
      color: var(--gray-dark);
      cursor: pointer;
    }
    @media (min-width: 960px) {
      border-width: 0;
      padding: 2px 4px;
      border-radius: 0;
    }
  }

  .active_filter {
    border: 2px solid var(--accent);
    color: var(--gray-dark);
    @media (min-width: 960px) {
      border: 0;
    }
    .filter_text {
      @media (min-width: 960px) {
        padding: 1px 2px;
        background-color: var(--accent);
      }
    }
  }

  .checked,
  .unchecked {
    display: none;
  }

  .visible {
    @media (min-width: 960px) {
      display: inline-block !important;
    }
  }

  section {
    .list_header {
      display: none;
      @media (min-width: 960px) {
      display: grid;
      grid-template-columns: repeat(12, 1fr);
      h4 {
        font-weight: bold;
        margin: 0;
      }
    }
  }
</style>
<script>
  const filters = document.querySelectorAll(".filter");
  filters.forEach((el) => {
    el.addEventListener("click", () => {
      const firstStateWasChecked = el.classList.contains("active_filter");
      filters.forEach((el) => {
        if (!el.classList.contains("active_filter")) return;
        el.classList.remove("active_filter");
        const checkedElement = el.querySelector(".checked");
        const uncheckedElement = el.querySelector(".unchecked");
        if (checkedElement) {
          checkedElement.classList.remove("visible");
        }
        if (uncheckedElement) {
          uncheckedElement.classList.add("visible");
        }
      });
      if (firstStateWasChecked) return;
      el.classList.add("active_filter");
      const checkedElement = el.querySelector(".checked");
      const uncheckedElement = el.querySelector(".unchecked");
      if (checkedElement) {
        checkedElement.classList.add("visible");
      }
      if (uncheckedElement) {
        uncheckedElement.classList.remove("visible");
      }
    });
  });
</script>

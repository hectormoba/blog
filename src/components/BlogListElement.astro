---
import Plus from "./svg/Plus.astro";

const { data, postUrl } = Astro.props;
const { pubDate, title, type } = data;
const date = new Date(pubDate).getTime();
const now = new Date().getTime();
const differenceBetweenDatesInDays = Math.round(
    (now - date) / 1000 / 60 / 60 / 24,
);
const isANewPost = differenceBetweenDatesInDays <= 10;
---

<clickable-li data-postUrl={postUrl}>
    <span class="date">{pubDate}</span>
    <span class="title">{title}</span>
    <span class="type">{type}</span>
    {isANewPost && <span class="new_badge">NEW!</span>}
    <span class="sign">
        <Plus />
    </span>
</clickable-li>
<style>
    clickable-li {
        list-style: none;
        border-top: 2px solid var(--black);
        display: grid;
        grid-row: auto;
        grid-template-columns: repeat(12, 1fr);
        position: relative;
        padding: 8px 4px;
    }
    button {
        /* appearance: none; */
    }

    clickable-li:hover {
        background-color: var(--accent);
        cursor: pointer;
    }

    .date {
        grid-column: 1 / 3;
    }

    .title {
        grid-column: 3 / 9;
        text-overflow: ellipsis;
    }

    .type {
        grid-column: 9 / 12;
        justify-self: start;
        border: 1px dotted #1e1e1e40;
        border-radius: 5px;
        padding: 0 4px;
    }

    .new_badge {
        position: absolute;
        z-index: 3;
        visibility: hidden;
        background-color: #fff;
        padding: 2px 5px;
    }

    .sign {
    }
    .visible {
        visibility: visible !important;
    }
</style>
<script>
    class ClickableLi extends HTMLLIElement {
        connectedCallback() {}
    }

    const listEls = document.querySelectorAll("clickable-li");
    listEls.forEach((el) => {
        const badgeEL = el.querySelector(".new_badge");
        if (!badgeEL) return;
        el.addEventListener("mouseenter", () => {
            badgeEL.classList.add("visible");
        });
        el.addEventListener("mousemove", (event) => {
            if (badgeEL instanceof HTMLElement) {
                const { x, y } = el.getBoundingClientRect();
                if (el.clientWidth - (event.clientX - x) <= 100) {
                    badgeEL.style.left = `${event.clientX - x - 50}px`;
                } else {
                    badgeEL.style.left = `${event.clientX - x + 14}px`;
                }
                badgeEL.style.top = `${event.clientY - y + 2}px`;
            }
        });
        el.addEventListener("mouseleave", (event) => {
            badgeEL.classList.remove("visible");
        });
    });
</script>
